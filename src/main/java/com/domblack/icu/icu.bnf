{
    parserClass="com.domblack.icu.IcuParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Icu"
    psiImplClassSuffix="Impl"
    psiPackage="com.domblack.icu"
    psiImplPackage="com.domblack.icu.psi.impl"

    elementTypeHolderClass="com.domblack.icu.psi.IcuTypes"
    elementTypeClass="com.domblack.icu.psi.IcuElementType"
    tokenTypeClass="com.domblack.icu.psi.IcuTokenType"

    psiImplUtilClass="com.domblack.icu.psi.impl.IcuImplUtil"

    tokens = [
        LEFT_BRACE  = 'FILE {'
        RIGHT_BRACE = 'FILE }'
        ARG_LEFT_BRACE = 'ARG {'
        ARG_RIGHT_BRACE = 'ARG }'
        COMMA      = ','
        EQUALS     = '='
        FORMAT_TYPE = 'number|date|time|plural|select|selectordinal'
        WHITE_SPACE = 'regexp:\s'
        COMMENT     = '//'
    ]
}

icuFile ::= languageKey LEFT_BRACE (message | block)* RIGHT_BRACE

languageKey ::= LANG_ID

block ::= (ID LEFT_BRACE (message | block)* RIGHT_BRACE) {
    mixin="com.domblack.icu.psi.impl.IcuNamedElementImpl"
    implements="com.domblack.icu.psi.IcuNamedElement"
    methods=[getID getPresentation getName setName getNameIdentifier]
}

message ::= ID messageBlock {
    mixin="com.domblack.icu.psi.impl.IcuNamedElementImpl"
    implements="com.domblack.icu.psi.IcuNamedElement"
    methods=[getID getPresentation getName setName getNameIdentifier]
}

// This is separate for formatting reasons so we can align the left brace!
messageBlock ::= LEFT_BRACE (QUOTE messageString* QUOTE) (QUOTE messageString* QUOTE)*  RIGHT_BRACE

messageString ::= argumentElement | STRING | PLACEHOLDER | VALID_ESCAPE_STRING | INVALID_ESCAPE_STRING

// This is a handler incase the argument is split onto multiple new lines
private newLine_ ::= (QUOTE QUOTE)?

argumentElement ::= ARG_LEFT_BRACE newLine_ PARAMETER elementFormat? newLine_ ARG_RIGHT_BRACE

elementFormat ::= newLine_? COMMA newLine_ (simpleFormat | pluralFormat | selectOrdinalFormat | selectFormat)

simpleFormat ::= ('number' | 'date' | 'time') newLine_ (COMMA OPTION_NAME)?

pluralFormat ::= 'plural' newLine_ COMMA newLine_ pluralStyle

selectOrdinalFormat ::= 'selectordinal' newLine_ COMMA newLine_ pluralStyle

selectFormat ::= 'select' newLine_ COMMA (newLine_ optionalFormatPattern)+

selector ::= (EQUALS NUMBER) | OPTION_NAME

optionalFormatPattern ::= selector newLine_ ARG_LEFT_BRACE (newLine_ messageString)* newLine_ ARG_RIGHT_BRACE

offset ::= 'offset:' newLine_ NUMBER

pluralStyle ::= offset? (newLine_ optionalFormatPattern)+
